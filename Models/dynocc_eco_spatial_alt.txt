model {
# This model is a dynamic occupancy model used to determine the occupancy
# state of each point count location within Hubbard Brook. This 
# Model was used to determine high-quality sites where 'site-dependence'
# is likely a important factor. We expect that occupancy of less 'suitable'
# sites will fluctuate more over the years. However, in years following 
# favorable non-breeding conditions, less favorable sites should be
# occupied at higher rates because more individuals survive the winter
# period. We use the following model to 1) identify the 'high-quality' 
# sites and also determine 'turn-over' and 'growth-rate' of each survey location.
# 
# This model was modified from Kery & Schaub chapter 13
######################################################################
#
# Priors
#
######################################################################
# Species HyperPriors
for(i in 1:5){
Mulgamma[i] ~ dnorm(0,0.001)
sigmalgamma[i] ~ dunif(0,100)
taulgamma[i] <- 1/pow(sigmalgamma[i],2)
}

for(i in 1:4){
MuBetaPsi[i] ~ dnorm(0,0.001)
sigmaBetaPsi[i] ~ dunif(0,100)
tauBetaPsi[i]<- 1/pow(sigmaBetaPsi[i],2)
}

for(i in 1:2){
MuBetaP[i] ~ dnorm(0,0.001)
sigmaBetaP[i] ~ dunif(0,100)
tauBetaP[i] <- 1/ pow(sigmaBetaP[i],2)
}


MuAlphaPsi~ dnorm(0,0.001)
MuAlphaP~ dnorm(0,0.001)

MuBetalphi~ dnorm(0,0.001)

MuAlphaLgamma~ dnorm(0,0.001)


#Standard deviation #
sigmaAlphaPsi ~ dunif(0,100)
sigmaAlphaP ~ dunif(0,100)
sigmaBetalphi ~ dunif(0,100)

sigmaAlphaLgamma ~ dunif(0,100)
sigmaAlphaLphi ~ dunif(0,100)

# Precision #

tauAlphaPsi <- 1/pow(sigmaAlphaLphi,2)
tauAlphaP <- 1/pow(sigmaAlphaP,2)
tauBetalphi <- 1/pow(sigmaBetalphi,2)
tauAlphaLgamma <- 1/pow(sigmaAlphaLgamma,2)



# PRIORS #
for(s in 1:nspp){
alpha.psi[s] ~ dnorm(MuAlphaPsi,tauAlphaPsi)
alpha.p[s] ~ dnorm(MuAlphaP,tauAlphaP)
beta.lphi[s] ~ dnorm(MuBetalphi,tauBetalphi)

for(i in 1:5){
beta.lgamma[i,s] ~ dnorm(Mulgamma[i],taulgamma[i])
}
for(i in 1:4){
beta.psi[i,s] ~ dnorm(MuBetaPsi[i],tauBetaPsi[i])
}
for(i in 1:2){
beta.p[i,s] ~ dnorm(MuBetaP[i],tauBetaP[i])
}

phi[s]~dunif(0.3,0.7)   # survival

#for(y in 1:(nyears-1)){
alpha.lgamma[s] ~ dnorm(MuAlphaLgamma,tauAlphaLgamma)
#} # y

#####################################################################
#
# Ecological submodel 
#
#####################################################################
for(i in 1:nschwarz){ # number of 50x50m grid cells
 z[i,1,s]~dbern(psi1[i,s])
 logit(psi1[i,s]) <- alpha.psi[s]+
                     beta.psi[1,s]*ThermalSum[i,1]+
                     beta.psi[2,s]*StrComplex[i]+ 
                     beta.psi[3,s]*Precip[i,1]+
                     beta.psi[4,s]*JuneTemp[i,1]

	for(y in 2:nyears){

      # Compute local density (prop of occupied neighbouring cells) for
      # use as autologistic covariate
      for (m in 1:cardneigh[i]){
        # Estimated (latent) occurrence state of all neighbours
        ConnSite[i,m,y-1,s] <- z[adjmat[i,m], y-1,s]
      }

    z[i,y,s]~dbern(muZ[i,y,s])
    muZ[i,y,s] <- z[i,y-1,s]*phi[s]+(1-z[i,y-1,s])*gamma[i,s,y-1]

      # Proportion of neighbours occupied (auto-covariate)
      D[i,y-1,s] <- sum(ConnSite[i, 1:cardneigh[i], y-1,s]) / cardneigh[i]

      logit(gamma[i,s,y-1]) <- alpha.lgamma[s] +
                                beta.lgamma[1,s] * D[i, y-1,s] +
				                beta.lgamma[2,s] * ThermalSum[i,y]+
                                beta.lgamma[3,s] * StrComplex[i]+ 
                                beta.lgamma[4,s] * Precip[i,y]+
                                beta.lgamma[5,s] * JuneTemp[i,y] 
  
    } #y : 2:nyears
}#i nschwarz
#####################################################################
#
# Observation model 
#
#####################################################################
for(i in 1:nschwarz){
	for(r in 1:nreps){
		for(y in 1:nyears){
		    occ[i,r,y,s]~dbern(muy[i,r,y,s])
			muy[i,r,y,s]<-z[i,y,s]*mean(p[i,,s,y])
                   logit(p[i,r,s,y]) <- alpha.p[s]+
                                        beta.p[1,s]*time[i,r,1]+
                                        beta.p[2,s]*date[i,r,1]                                       
			} #y : nyears
		} #r : nreps

#####################################################################
#
# Derived parameters of interest 
#
#####################################################################
psi[i,1,s]<-psi1[i,s]
	} #i : nschwarz
	
n.occupied[s,1]<-sum(z[1:nschwarz,1,s])

mean.dispersal[s]<-mean(gamma[,s,])

for(y in 2:nyears){
	n.occupied[s,y]<-sum(z[1:nschwarz,y,s])
	} #nyears
	
for(i in 1:nschwarz){

Yrs.Occ[i,s]<-sum(z[i,,s])

for(y in 2:nyears){
	psi[i,y,s]<-psi[i,y-1,s]*phi[s]+(1-psi[i,y-1,s])*gamma[i,s,y-1]
	growthrate[i,s,y]<-psi[i,y,s]/psi[i,y-1,s]
	turnover[i,s,y-1]<-(1-psi[i,y-1,s])*gamma[i,s,y-1]/psi[i,y,s]
     } #y : nyears
   } # nschwarz
 } #nspp
 
for(y in 1:(nyears-1)){
m.dispersal[y]<-mean(gamma[,,y])
v.dispersal[y]<- sum(pow(gamma[,,y]-m.dispersal[y],2))/(nspp-1)
 } #n years

for(i in 1:nschwarz){
for(y in 1:nyears){
spp.rich[i,y] <- sum(z[i,y,])
}
}

# Derived quantities
# EffectSize difference #
for(s in 1:nspp){
for(i in 1:5){
effectlgamma[i,s] <- Mulgamma[i] - beta.lgamma[i,s] 
}

for(l in 1:nspp){
for(b in 1:5){
 effectBeta[s,l,b] <- beta.lgamma[b,s]-beta.lgamma[b,l]
 }
 }
}
for(b in 1:5){
 meanDiffBeta[b] <- mean(effectBeta[upperd[,1],upperd[,2],b])
}
 
}